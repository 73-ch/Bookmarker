chrome.runtime.onInstalled.addListener(function (detail) {  if (detail.reason == "install"){    var data;    data = {      tabs: {},      user_settings: {        folders: {},        max_results: 20      },      projects: {}    };    console.log(data);    chrome.storage.local.set(data, function (value) {      console.log(value);      let folder_ids = [];      chrome.bookmarks.create({'title': 'Always'}, function (folder1) {        folder_ids.push(folder1.id);        chrome.bookmarks.create({'title': 'See later'}, function (folder2) {          folder_ids.push(folder2.id);          chrome.bookmarks.create({'title': 'Projects'}, function (folder3) {            folder_ids.push(folder3.id);            setInitFolderId(folder_ids);          });        });      });    });  }});function setInitFolderId(folder_ids) {  chrome.storage.local.get("user_settings", function (user_settings) {    for (let i = 0; i < 3; i++){      user_settings["user_settings"]["folders"][i + 1] = folder_ids[i];    }    console.log(user_settings);    chrome.storage.local.set(user_settings, function () {      getStorage().then(function (result) {        console.log(result);      });    })  });}chrome.commands.onCommand.addListener(function (command) {  console.log(command);  if (command == "delete_bookmark"){    chrome.windows.getCurrent(function (window) {      chrome.tabs.getSelected(window.id, function (tab) {        getBookmarkAll().then(function (bookmarks) {          let bookmark = searchBookmarkUrl(bookmarks, tab.url);          if (bookmark){            chrome.bookmarks.remove(bookmark.id, function () {              let check = searchBookmarkUrl(bookmarks, tab.url);              console.log(check);              chrome.storage.local.get("tabs", function (tabs) {                for (var key in tabs["tabs"]){                  if (key == bookmark.id.toString()){                    delete tabs["tabs"][key];                    break;                  }                }                chrome.storage.local.set(tabs, function (result) {                  console.log(result);                });              });            });          }        });      });    });  }});chrome.runtime.onMessage.addListener(  function(message, sender, sendResponse) {    console.log(message);    if (message.get_bookmark_all) {      getBookmarkAll().then(function(bookmarks){        sendResponse({bookmarks: bookmarks});      });    }    if (message.bookmark_level){      setBookmarkLevel(message.bookmark_level.bookmark_id, message.bookmark_level.level).then(function(result){        sendResponse({result: result});      });    }    if (message.getBookmarkLevel){      getBookmarkLevel(message.getBookmarkLevel.bookmark_id).then(function(result){        sendResponse({result: result});      });    }    if (message.getStorage){      getStorage().then(function(result){        sendResponse({result: result});      });    }    if (message.newBookmark){      newBookmark(message.newBookmark.title, message.newBookmark.url, message.newBookmark.level).then(function (result) {        sendResponse(result);      });    }    if (message.getAllWindow){      getAllWindow().then(function (windows) {        sendResponse(windows);      });    }    if (message.closeTab != null){      closeTab(sender.url, message.closeTab);    }    if (message.openTab){      openTab(message.openTab).then(function (scroll) {        sendResponse(scroll);      });    }    return true;  });function createProject() {}function openTab(url) {  return new Promise(function (resolve, reject) {    getBookmarkAll().then(function (bookmark_all) {      let bookmark = searchBookmarkUrl(bookmark_all, url);      if (!bookmark) return false;      let id = bookmark.id;      let key_object = {};      key_object["tabs"] = {};      key_object["tabs"][id] = null;      chrome.storage.local.get(key_object, function (data) {        console.log(data["tabs"][id]);        if (data["tabs"][id]["level"] == 2 || data["tabs"][id]["level"] == 3){          resolve(data["tabs"][id].scroll);        }      });    });  });}function closeTab(url, scroll) {  getBookmarkAll().then(function (bookmark_all) {    let bookmark = searchBookmarkUrl(bookmark_all, url);    if (!bookmark) return;    let id = bookmark.id;    let key_object = {};    key_object["tabs"] = {};    key_object["tabs"][id] = null;    chrome.storage.local.get(key_object, function (data) {      console.log(data);      if (!data["tabs"][id]){        let content = {};        data["tabs"][id] = content;      }      data["tabs"][id]["scroll"] = scroll;      chrome.storage.local.set(data, function () {        getStorage().then(function (result) {          console.log(result);        });      });    });  });}function newBookmark(title, url, level) {  return new Promise(function (resolve, reject) {    chrome.bookmarks.create({      'title': title,      'url': url    }, function (bookmark) {      if (!bookmark) reject('failed');      console.log(bookmark);      setBookmarkLevel(bookmark.id, level).then(function (result) {        console.log(result);        resolve(bookmark);      });    });  });}function getBookmarkAll(){  return new Promise(function(resolve, reject){    chrome.bookmarks.getTree(function(desktop_bookmarks){      var result = [];      if (desktop_bookmarks){        createBookmarkArray(desktop_bookmarks, result);        resolve(result);      }else{        reject('failed');      }    });  });}function setBookmarkLevel(bookmark_id, level){  return new Promise(function(resolve, reject){    let key_object = {};    key_object["tabs"] = {};    key_object["tabs"][bookmark_id] = null;    chrome.storage.local.get(key_object, function (data) {      if (!data["tabs"][bookmark_id]){        let content = {};        data["tabs"][bookmark_id] = content;      }      data["tabs"][bookmark_id]["level"] = level;      chrome.storage.local.set(data, function (callback) {        console.log(callback);        let key_object = {};        key_object["user_settings"] = {};        key_object["user_settings"]["folders"] = {};        key_object["user_settings"]["folders"][level] = null;        chrome.storage.local.get(key_object, function (folder) {          chrome.bookmarks.move(bookmark_id, {parentId: folder["user_settings"]["folders"][level]}, function (bookmark) {            console.log(bookmark);          });        });        getStorage().then(function (result) {          console.log(result);        });      });    });  });}function getBookmarkLevel(bookmark_id){  return new Promise(function(resolve, reject){    let key_object = {};    key_object["tabs"] = {};    key_object["tabs"][bookmark_id] = null;    chrome.storage.local.get(key_object, function(bookmark){      if(bookmark) resolve(bookmark.level);      reject("failed");    });  });}function getStorage(){  return new Promise(function(resolve,reject){    chrome.storage.local.get(function(items){      resolve(items);    });  });}function getAllWindow() {  return new Promise(function (resolve) {    chrome.windows.getAll({populate: true}, function (windows) {      resolve(windows);    });  });}function createBookmarkArray(bookmarks, result){  result = result || [];  bookmarks.forEach(function (val) {    if(val.children){      createBookmarkArray(val.children, result);    } else if(val.url) {      val.bookmark = true;      result.push(val);    }  });}function searchBookmarkUrl(bookmarks, url) {  for (let i = 0; i < bookmarks.length; i++){    let val = bookmarks[i];    let result;    if(val.url == url){      result = val;    }    if(result) return result;  }  return false;}