chrome.runtime.onInstalled.addListener(function (detail) {  if (detail.reason == "install"){    chrome.bookmarks.create({'title': 'Always'});    chrome.bookmarks.create({'title': 'See later'});    chrome.bookmarks.create({'title': 'Projects'});  }});chrome.runtime.onMessage.addListener(  function(message, sender, sendResponse) {    console.log(message);    if (message.get_bookmark_all) {      getBookmarkAll().then(function(bookmarks){        sendResponse({bookmarks: bookmarks});      });    }    if (message.bookmark_level){      setBookmarkLevel(message.bookmark_level.bookmark_id, message.bookmark_level.level).then(function(result){        sendResponse({result: result});      });    }    if (message.getBookmarkLevel){      getBookmarkLevel(message.getBookmarkLevel.bookmark_id).then(function(result){        sendResponse({result: result});      });    }    if (message.getStorage){      getStorage().then(function(result){        sendResponse({result: result});      });    }    if (message.newBookmark){      newBookmark(message.newBookmark.title, message.newBookmark.url, message.newBookmark.parent, message.newBookmark.level).then(function (result) {        sendResponse(result);      });    }    if (message.getAllWindow){      getAllWindow().then(function (windows) {        sendResponse(windows);      });    }    if (message.closeTab != null){      closeTab(sender.url, message.closeTab);    }    if (message.openTab){      openTab(message.openTab).then(function (scroll) {        console.log()        sendResponse(scroll);      });    }    return true;  });function openTab(url) {  return new Promise(function (resolve, reject) {    getBookmarkAll().then(function (bookmark_all) {      let bookmark = searchBookmarkUrl(bookmark_all, url);      if (!bookmark) reject('not found');      let id = bookmark.id;      chrome.storage.local.get(id, function (data) {        resolve(data[id].scroll);      });    });  });}function closeTab(url, scroll) {  getBookmarkAll().then(function (bookmark_all) {    let bookmark = searchBookmarkUrl(bookmark_all, url);    if (!bookmark) return;    let id = bookmark.id;    chrome.storage.local.get(id, function (data) {      if (!Object.keys(data).length){        let content = {};        data[id] = content;      }      data[id]["scroll"] = scroll;      chrome.storage.local.set(data, function (callback) {        console.log(callback);        getStorage().then(function (result) {          console.log(result);        });      });    });  });}function newBookmark(title, url, parent, level) {  return new Promise(function (resolve, reject) {    chrome.bookmarks.create({      'title': title,      'url': url,      "parentId": parent.to_i    }, function (bookmark) {      if (!bookmark) reject('failed');      console.log(bookmark);      setBookmarkLevel(bookmark.id, level).then(function (result) {        console.log(result);        resolve(bookmark);      });    });  });}function getBookmarkAll(){  return new Promise(function(resolve, reject){    chrome.bookmarks.getTree(function(desktop_bookmarks){      var result = [];      if (desktop_bookmarks){        createBookmarkArray(desktop_bookmarks, result);        resolve(result);      }else{        reject('failed');      }    });  });}function setBookmarkLevel(bookmark_id, level){  return new Promise(function(resolve, reject){    chrome.storage.local.get(bookmark_id, function (data) {      if (!Object.keys(data).length){        let content = {};        data[bookmark_id] = content;      }      data[bookmark_id]["level"] = level;      chrome.storage.local.set(data, function (callback) {        console.log(callback);        getStorage().then(function (result) {          console.log(result);        });      });    });  });}function getBookmarkLevel(bookmark_id){  return new Promise(function(resolve, reject){    chrome.storage.local.get(bookmark_id, function(bookmark_level){      if(bookmark_level) resolve(bookmark_level);      reject("failed");    });  });}function getStorage(){  return new Promise(function(resolve,reject){    chrome.storage.local.get(function(items){      resolve(items);    });  });}function getAllWindow() {  return new Promise(function (resolve) {    chrome.windows.getAll({populate: true}, function (windows) {      resolve(windows);    });  });}function createBookmarkArray(bookmarks, result){  result = result || [];  bookmarks.forEach(function (val) {    if(val.children){      createBookmarkArray(val.children, result);    } else if(val.url) {      val.bookmark = true;      result.push(val);    }  });}function searchBookmarkUrl(bookmarks, url) {  for (let i = 0; i < bookmarks.length; i++){    let val = bookmarks[i];    let result;    if(val.url == url){      result = val;    }    if(result) return result;  }  return false;}