chrome.runtime.onInstalled.addListener(function (detail) {  if (detail.reason == "install"){    initStorage().then(function (result) {      if (!result){        console.log('error!');        return false;      }      initFolder().then(function(result){        if(result){          initBookmarkData();        }      });    });  } else if(detail.reason == "update"){    var key_object;    key_object = {      bookmarks: false,      user_settings: false,      projects: false    };    chrome.storage.local.get(key_object, function (result) {      if (!result["bookmarks"])result["bookmarks"] = {};      if (!result["projects"])result["projects"] = {};      if (!result["user_settings"])result["user_settings"] = {};      if (!result["user_settings"]["folders"])result["user_settings"]["folders"] = {};      if (!result["user_settings"]["max_results"])result["user_settings"]["max_results"] = 20;      chrome.storage.local.set(result, function(){        for (let i = 1; i <= 3; i++) {          if (!result["user_settings"]["folders"][i]) {            initFolder();            break;          }        }      });    });  }});function initBookmarkData(){  let data = {};  data["bookmarks"] = {};  getBookmarkAll().then(function(bookmarks){    for (let i = 0; i < bookmarks.length; i++){      let bookmark = bookmarks[i];      data["bookmarks"][bookmark.id] = {};      data["bookmarks"][bookmark.id]["level"] = 3;      data["bookmarks"][bookmark.id]["scroll"] = 0;      data["bookmarks"][bookmark.id]["count"] = 0;    }    console.log(data);    chrome.storage.local.set(data);  });}function initStorage() {  return new Promise(function (resolve, reject) {    var data;    data = {      bookmarks: {},      user_settings: {        folders: {},        max_results: 20      },      projects: {}    };    console.log(data);    chrome.storage.local.set(data, function () {      var error = chrome.runtime.lastError;      if (error) reject(error);      resolve(true);    });  });}function initFolder() {  return new Promise(function (resolve, reject) {    let folder_ids = [];    chrome.bookmarks.create({'title': 'Always'}, function (folder1) {      folder_ids.push(folder1.id);      chrome.bookmarks.create({'title': 'See later'}, function (folder2) {        folder_ids.push(folder2.id);        chrome.bookmarks.create({'title': 'Projects'}, function (folder3) {          folder_ids.push(folder3.id);          setInitFolderId(folder_ids).then(function(result){            if (result) resolve(true);          });        });      });    });  });}function setInitFolderId(folder_ids) {  return new Promise(function (resolve) {    chrome.storage.local.get("user_settings", function (user_settings) {      for (let i = 0; i < 3; i++) {        user_settings["user_settings"]["folders"][i + 1] = folder_ids[i];      }      chrome.storage.local.set(user_settings, function () {        resolve(true);      })    });  });}chrome.commands.onCommand.addListener(function (command) {  if (command == "delete_bookmark"){    chrome.windows.getCurrent(function (window) {      chrome.tabs.getSelected(window.id, function (tab) {        getBookmarkAll().then(function (bookmarks) {          let bookmark = searchBookmarkUrl(bookmarks, tab.url);          if (!bookmark) return;          deleteBookmark(bookmark);        });      });    });  }});chrome.bookmarks.onCreated.addListener(function (bookmark_id, bookmark) {  if (bookmark.children) {    let data = [];    data["bookmarks"] = {};    data["bookmarks"][bookmark_id] = {      "level": 3,      "scroll": 0,      "count": 0    };    chrome.storage.local.set(data);  }});chrome.bookmarks.onRemoved.addListener(function (bookmark_id) {  deleteStorage(bookmark_id);});chrome.runtime.onMessage.addListener(  function(message, sender, sendResponse) {    if (message.get_bookmark_all) {      getBookmarkAll().then(function(result){        console.log(result);        sortBookmarks(result).then(function (bookmarks) {          sendResponse({bookmarks: bookmarks});        });      });    }    if (message.bookmark_level){      setBookmarkLevel(message.bookmark_level.bookmark_id, message.bookmark_level.level).then(function(result){        sendResponse({result: result});      });    }    if (message.getBookmarkLevel){      getBookmarkLevel(message.getBookmarkLevel.bookmark_id).then(function(result){        sendResponse({result: result});      });    }    if (message.getStorage){      getStorage().then(function(result){        sendResponse({result: result});      });    }    if (message.newBookmark){      newBookmark(message.newBookmark.title, message.newBookmark.url, message.newBookmark.level).then(function (result) {        sendResponse(result);      });    }    if (message.getAllWindow){      getAllWindow().then(function (windows) {        sendResponse(windows);      });    }    if (message.closeTab != null){      closeTab(sender.url, message.closeTab);    }    if (message.openTab){      openTab(message.openTab).then(function (scroll) {        sendResponse(scroll);      });    }    return true;  });function createProject() {}function openTab(url) {  return new Promise(function (resolve, reject) {    getBookmarkAll().then(function (bookmark_all) {      let bookmark = searchBookmarkUrl(bookmark_all, url);      if (!bookmark) return;      let id = bookmark.id;      let key_object = {};      key_object["bookmarks"] = {};      key_object["bookmarks"][id] = null;      chrome.storage.local.get(key_object, function (data) {        console.log(data["bookmarks"][id]);        if (data["bookmarks"][id]["level"] == 2){          console.log('read');          deleteBookmark(bookmark);        }        if (data["bookmarks"][id]["level"] == 2 || data["bookmarks"][id]["level"] == 3){          resolve(data["bookmarks"][id].scroll);        }else{          resolve(0);        }      });    });  });}function closeTab(url, scroll) {  getBookmarkAll().then(function (bookmark_all) {    let bookmark = searchBookmarkUrl(bookmark_all, url);    let id = bookmark.id;    let key_object = {};    key_object["bookmarks"] = {};    key_object["bookmarks"][id] = null;    chrome.storage.local.get(key_object, function (data) {      if (!data["bookmarks"][id])data["bookmarks"][id] = {};      data["bookmarks"][id]["scroll"] = scroll;      data["bookmarks"][id]["count"] =  parseInt(data["bookmarks"][id]["count"]) + 1;      chrome.storage.local.set(data);    });  });}function newBookmark(title, url, level) {  return new Promise(function (resolve, reject) {    chrome.bookmarks.create({      'title': title,      'url': url    }, function (bookmark) {      if (!bookmark) reject('failed');      console.log(bookmark);      setBookmarkLevel(bookmark.id, level).then(function (result) {        console.log(result);        resolve(bookmark);      });    });  });}function deleteBookmark(bookmark) {  chrome.bookmarks.remove(bookmark.id);}function getBookmarkAll(){  return new Promise(function(resolve, reject){    chrome.bookmarks.getTree(function(desktop_bookmarks){      var result = [];      if (desktop_bookmarks){        createBookmarkArray(desktop_bookmarks, result);        resolve(result);      }else{        reject('failed');      }    });  });}function setBookmarkLevel(bookmark_id, level){  return new Promise(function(resolve, reject){    let key_object = {};    key_object["bookmarks"] = {};    key_object["bookmarks"][bookmark_id] = null;    chrome.storage.local.get(key_object, function (data) {      if (!data["bookmarks"][bookmark_id]) data["bookmarks"][bookmark_id] = {};      data["bookmarks"][bookmark_id]["level"] = parseInt(level);      chrome.storage.local.set(data, function (callback) {        console.log(callback);        let key_object = {};        key_object["user_settings"] = {};        key_object["user_settings"]["folders"] = {};        key_object["user_settings"]["folders"][level] = null;        chrome.storage.local.get(key_object, function (folder) {          chrome.bookmarks.move(bookmark_id, {parentId: folder["user_settings"]["folders"][level]}, function (bookmark) {            console.log(bookmark);          });        });        getStorage().then(function (result) {          console.log(result);        });      });    });  });}function getBookmarkLevel(bookmark_id){  return new Promise(function(resolve, reject){    let key_object = {};    key_object["bookmarks"] = {};    key_object["bookmarks"][bookmark_id] = null;    chrome.storage.local.get(key_object, function(bookmark){      if(bookmark) resolve(bookmark.level);      reject("failed");    });  });}function getStorage(){  return new Promise(function(resolve,reject){    chrome.storage.local.get(function(items){      resolve(items);    });  });}function deleteStorage(bookmark_id) {  chrome.storage.local.get("bookmarks", function (data) {    Object.keys(data["bookmarks"]).forEach(function (key) {      if (key == bookmark_id){        delete data["bookmarks"][key];        break;      }    });    chrome.storage.local.set(data);  });}function getAllWindow() {  return new Promise(function (resolve) {    chrome.windows.getAll({populate: true}, function (windows) {      resolve(windows);    });  });}function createBookmarkArray(bookmarks, result){  result = result || [];  bookmarks.forEach(function (val) {    if(val.children){      createBookmarkArray(val.children, result);    } else if(val.url) {      val.bookmark = true;      result.push(val);    }  });}function sortBookmarks(bookmarks) {  return new Promise(function (resolve) {    getStorage().then(function (data) {      bookmarks.sort(function (a, b) {        let a_level = data["bookmarks"][a.id]["level"];        let b_level = data["bookmarks"][b.id]["level"];        let a_count = data["bookmarks"][a.id]["count"];        let b_count = data["bookmarks"][b.id]["count"];        if (a_level < b_level) return -1;        if (a_level > b_level) return 1;        if (a_count > b_count) return -1;        if (a_count < b_count) return 1;      });      resolve(bookmarks);    });  });}function searchBookmarkUrl(bookmarks, url) {  for (let i = 0; i < bookmarks.length; i++){    let val = bookmarks[i];    let result;    if(val.url == url){      result = val;    }    if(result) return result;  }  return false;}